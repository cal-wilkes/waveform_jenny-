library ieee;
use ieee.std_logic_1164.all;
use iee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity sawtooth is
	port( clk : in std_logic;  -- to change the frequncy you need to adjust this clock, not fully sure how yet but im guessing we'd have to pass that value into this
			reset : in std_logic;
			pwm : out std_logic_vector(7 downto 0));
end sawtooth;

component pwm_jenny 
	generic (num_of_cycles : integer);
	port (clk : in std_logic;
		reset : in std_logic;
		pwm : out std_logic_vector(7 downto 0);
end component;

architecture Behavioral of sawtooth is
signal counter : integer := 0;
signal amp : integer := 0;

begin

saw3.3v : pwm_jenny
	generic map (num_of_cycles => 1000)
	port map( clk => clk,
			reset => reset,
			pwm => pwm);


saw50mv : pwm_jenny
	generic map(num_of_cycles => 15)
	port map (clk => clk,
			reset => reset,
			pwm => pwm);

saw150mv : pwm_jenny
	generic map(num_of_cycles => 46) -- might be 45 since number is 45.454545
	port map (clk => clk,
			reset => reset,
			pwm => pwm);

saw2.5v : pwm_jenny
	generic map(num_of_cycles => 758)
	port map( clk => clk,
			reset => reset,
			pwm => pwm);

process(clk,reset)
begin	
	if(reset = '1') then
		counter <= 0;
		pwm <= 0;
	elsif(rising_edge(clk)) then	-- the amplitude should be controlled by the value of counter which has 255 as the max value for 8 bits
		if(counter != num_of_cycles) then	
			counter <= counter + 1;
			amp <= counter;
		else
			amp <= num_of_cycles;
		end if;
	end if;
	
end process;

pwm <= conv_std_logic_vector(amp,8);

end Behavioral;

