library ieee;
use ieee.std_logic_1164.all;

entity top_level_tb is
end top_level_tb;

architecture behavior of top_level_tb is

component debounce is
	port( clk: in std_logic;
		reset: in std_logic;
		buttons: in std_logic_vector(3 down to 0);
		switches: in std_logic_vector(1 downto 0);
		d_buttons: out std_logic_vector(3 downto 0);
		d_switches: out std_logic_vector(1 downto 0));

component amplitude_counter is		
        
            Port ( 
                      clk : in  STD_LOGIC;
                      reset : in  STD_LOGIC;
                      BTN: in STD_LOGIC_VECTOR(1 downto 0);
                      max_amp : out STD_LOGIC_VECTOR (10 downto 0)
                );
     end component;
	 
	  component frequency_module is		
        
            Port ( 
                            CLK: in STD_LOGIC;
                            BTN: in STD_LOGIC_VECTOR(1 downto 0);
                            RST: in STD_LOGIC;
                            NUM_CLOCK_CYCLES: out STD_LOGIC_VECTOR (26 downto 0);         -- number of system clock cyles in given period
                            FREQ: out STD_LOGIC --;                                          -- will pulse once per selected period 
                            --CLK_CYCLE_COUNT: out STD_LOGIC_VECTOR (26 downto 0)           -- current count of the number of system clock cycles since last pulse
                );
     end component;
	 
	component SQUARE_WAVE is
	port(   clk: in std_logic; 
	        NUM_CLOCK_CYCLES: in integer;
	        MAX_AMP: in integer;
			reset: in std_logic;
			sqr_wave1: out std_logic);
end COMPONENT;
	
	
component SIN_WAVE is
	port(   clk: in std_logic; 
	        NUM_CLOCK_CYCLES: in integer;
	       -- MAX_AMP: in integer;
			reset: in std_logic;
			sin_wave1: out std_logic);
end COMPONENT;

component SAW_WAVE is
	port(   clk: in std_logic; 
	        NUM_CLOCK_CYCLES: in integer;
	        MAX_AMP: in integer;
			reset: in std_logic;
			SAW_wave1: out std_logic);
end COMPONENT;

component TRI_WAVE is
	port(   clk: in std_logic; 
	        NUM_CLOCK_CYCLES: in integer;
	        MAX_AMP: in integer;
			reset: in std_logic;
			TRI_wave1: out std_logic);
end COMPONENT;

COMPONENT wave_selector is		
        
            Port ( 
                      clk : in  STD_LOGIC;
                      reset : in  STD_LOGIC;
                      switch: in STD_LOGIC_VECTOR (1 downto 0);
                      SQR_WAVE: in STD_LOGIC;
                      SAW_WAVE: in STD_LOGIC;
                      TRI_WAVE: in STD_LOGIC;
                      SIN_WAVE: in STD_LOGIC;
                      wave : out  STD_LOGIC
                );
                
    end COMPONENT;

signal clk: std_logic := '0';
signal reset: std_logic := '0';
signal buttons: std_logic_vector(3 downto 0) := "0000";
signal switches: std_logic_vector( 1 downto 0) := "00";
signal BTN: STD_LOGIC_VECTOR (1 downto 0) := "00";
signal NUM_CLOCK_CYCLES: integer;
signal MAX_AMP: integer;
signal SQR_WAVE: STD_LOGIC := '0';
signal SAW_WAVE: STD_LOGIC := '0';
signal TRI_WAVE:  STD_LOGIC := '0';
signal SIN_WAVE: STD_LOGIC := '0';

	--Outputs
	
signal max_amp_out: STD_LOGIC_VECTOR (10 downto 0);
signal wave: std_logic := '0';
signal FREQ: std_logic;
signal NUM_CLOCK_CYCLES_OUT: STD_LOGIC_VECTOR (26 downto 0);
signal sqr_wave1: STD_LOGIC;
signal sin_wave1: STD_LOGIC;
signal saw_wave1: STD_LOGIC;
signal TRI_wave1: STD_LOGIC;
signal d_buttons:std_logic_vector(3 downto 0);
signal d_switches: std_logic_vector(1 downto 0);

constant clk_period : time := 10 ns;

begin


uut: top_level 
	port map(
		clk => clk,
		reset => reset,
		buttons => buttons,
		switches => switches,
		wave => wave);
		
		
uut: debounce
	port map(
		clk => clk,
		reset => reset,
		buttons => buttons,
		switches => switches,
		d_buttons => d_buttons,
		d_switches => d_switches);

uut: amplitude_counter		
    Port MAP ( 
        clk => clk,
        reset => reset,
        BTN(0) => d_buttons(0),
	BTN(1) => d_buttons(1),
        max_amp_out => max_amp_out
        );
	
uut: frequency_module		
            Port MAP ( 
                      CLK => CLK,
                      BTN(0) => d_buttons(3),
		      BTN(1) => d_buttons(4),
                      RST => RESET,
                      NUM_CLOCK_CYCLES_OUT => NUM_CLOCK_CYCLES_OUT,        -- number of system clock cyles in given period
                      FREQ => FREQ --;                                          -- will pulse once per selected period 
                                       --CLK_CYCLE_COUNT: out STD_LOGIC_VECTOR (26 downto 0)           -- current count of the number of system clock cycles since last pulse
                           );
						   
UUT: SQUARE_WAVE 
            Port MAP ( 
                      clk => clk,
                      reset => reset,
                      NUM_CLOCK_CYCLES => NUM_CLOCK_CYCLES_OUT,
                      MAX_AMP => max_amp_out,
                      sqr_wave1 => SQR_WAVE1
                );

UUT: SAW_WAVE 
            Port MAP ( 
                      clk => clk,
                      reset => reset,
                      NUM_CLOCK_CYCLES => NUM_CLOCK_CYCLES_OUT,
                      MAX_AMP => max_amp_out,
                      saw_wave1 => SAW_WAVE1
                );

UUT: SIN_WAVE 
            Port MAP ( 
                      clk => clk,
                      reset => reset,
                      NUM_CLOCK_CYCLES => NUM_CLOCK_CYCLES_OUT,
                      sin_wave1 => SIN_WAVE1
                );
				
UUT: TRI_WAVE 
            Port MAP ( 
                      clk => clk,
                      reset => reset,
                      NUM_CLOCK_CYCLES => NUM_CLOCK_CYCLES_OUT,
                      MAX_AMP => max_amp_out,
                      TRI_wave1 => TRI_WAVE1
                );			

uut: wave_selector		
           PORT MAP ( 
                        clk => clk, 
                        reset => reset,
                        switches => switches,
                        SQR_WAVE => sqr_wave1,
                        SAW_WAVE => saw_wave1,
                        TRI_WAVE => TRI_wave1,
                        SIN_WAVE => sin_wave1,
                        wave => wave
                  );				
				
clk_period : process
	begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
end process; 


stim_proc: process
	begin
		reset <= '0';
      wait for 100ns;	
		reset <= '1';
      wait for 100ns;
		reset <= '0';
      wait for 100ns;    
         buttons(0) <= '1';
      wait for 10ns;
         buttons(0) <= '0';
      wait for 100ns;    
         buttons(0) <= '1';
      wait for 10ns;
         buttons(0) <= '0';
      wait for 100ns;    
         buttons(0) <= '1';
      wait for 10 ns;
         buttons(0) <= '0';
      wait for 100ns;    
         buttons(0) <= '1';
      wait for 10 ns;
        buttons(0) <= '0';
      wait for 100 ns;
      
      
          buttons(1) <= '1';
      wait for 10 ns;  
          buttons(1) <= '0';
      wait for 100 ns;   
          buttons(1) <= '1';
      wait for 10 ns;  
          buttons(1) <= '0';
      wait for 100 ns;     
          buttons(1) <= '1';
      wait for 10 ns;  
          buttons(1) <= '0';
      wait for 100 ns;  
          buttons(1) <= '1';
      wait for 10 ns;  
          buttons(1) <= '0';
      wait for 100 ns;  
          buttons(1) <= '1';
      wait for 10 ns;  
          buttons(1) <= '0';
      wait for 100 ns; 

		buttons(2) <= '1';
      wait for 10 ns;  
          buttons(2) <= '0';
      wait for 100 ns;   
          buttons(2) <= '1';
      wait for 10 ns;  
          buttons(2) <= '0';
      wait for 100 ns;     
          buttons(2) <= '1';
      wait for 10 ns;  
          buttons(2) <= '0';
      wait for 100 ns;  
          buttons(2) <= '1';
      wait for 10 ns;  
          buttons(2) <= '0';
      wait for 100 ns;  
          buttons(2) <= '1';
      wait for 10 ns;  
          buttons(2) <= '0';
      wait for 100 ns; 

		buttons(3) <= '1';
      wait for 10 ns;  
          buttons(3) <= '0';
      wait for 100 ns;   
          buttons(3) <= '1';
      wait for 10 ns;  
          buttons(3) <= '0';
      wait for 100 ns;     
          buttons(3) <= '1';
      wait for 10 ns;  
          buttons(3) <= '0';
      wait for 100 ns;  
          buttons(3) <= '1';
      wait for 10 ns;  
          buttons(3) <= '0';
      wait for 100 ns;  
          buttons(3) <= '1';
      wait for 10 ns;  
          buttons(3) <= '0';
      wait for 100 ns; 	  
      
	  
		switches(0) <= '1';
      wait for 10 ns;  
          switches(0) <= '0';
      wait for 100 ns;   
          switches(0) <= '1';
      wait for 10 ns;  
          switches(0) <= '0';
      wait for 100 ns;     
          switches(0) <= '1';
      wait for 10 ns;  
          switches(0) <= '0';
      wait for 100 ns;  
          switches(0) <= '1';
      wait for 10 ns;  
          switches(0) <= '0';
      wait for 100 ns;  
          switches(0) <= '1';
      wait for 10 ns;  
          switches(0) <= '0';
      wait for 100 ns; 
	  
	  switches(1) <= '1';
      wait for 10 ns;  
          switches(1) <= '0';
      wait for 100 ns;   
          switches(1) <= '1';
      wait for 10 ns;  
          switches(1) <= '0';
      wait for 100 ns;     
          switches(1) <= '1';
      wait for 10 ns;  
          switches(1) <= '0';
      wait for 100 ns;  
          switches(1) <= '1';
      wait for 10 ns;  
          switches(1) <= '0';
      wait for 100 ns;  
          switches(1) <= '1';
      wait for 10 ns;  
          switches(1) <= '0';
      wait for 100 ns; 
	  
	  
      wait;
   end process;
   
   end;